# /etc/nginx/sites-available/askaraai
# FIXED Nginx configuration untuk AskaraAI

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=50r/m;
limit_req_zone $binary_remote_addr zone=static:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=clips:10m rate=10r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Main HTTP server (redirect to HTTPS if SSL is configured)
server {
    listen 80 default_server;
    server_name askaraai.com www.askaraai.com _;
    
    # Security headers even for HTTP
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Check if SSL is configured
    set $ssl_configured 0;
    if (-f /etc/letsencrypt/live/askaraai.com/fullchain.pem) {
        set $ssl_configured 1;
    }
    
    # Redirect to HTTPS if SSL is configured
    if ($ssl_configured = 1) {
        return 301 https://$server_name$request_uri;
    }
    
    # Otherwise serve the application directly
    root /var/www/askaraai;
    
    # Rate limiting
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;
    
    # Performance settings
    client_max_body_size 500M;
    client_body_timeout 120s;
    client_header_timeout 60s;
    send_timeout 120s;
    keepalive_timeout 65s;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security: Block common exploit attempts
    location ~* /(phpmyadmin|admin|administrator|manager|controlpanel|config|database|\.env|\.git) {
        deny all;
        access_log off;
        return 444;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        return 444;
    }
    
    # Main application route
    location / {
        limit_req zone=general burst=30 nodelay;
        try_files $uri @app;
    }
    
    # API endpoints with rate limiting
    location ~ ^/api/(auth|login|signup) {
        limit_req zone=login burst=3 nodelay;
        try_files $uri @app;
    }
    
    location /api/process-video {
        limit_req zone=api burst=1 nodelay;
        try_files $uri @app;
    }
    
    location /api/ {
        limit_req zone=general burst=10 nodelay;
        try_files $uri @app;
    }
    
    # Admin panel
    location /admin {
        limit_req zone=general burst=5 nodelay;
        try_files $uri @app;
        
        # Additional security headers for admin
        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
    }
    
    # Launch/Countdown page
    location /launch {
        limit_req zone=general burst=20 nodelay;
        try_files $uri @app;
    }
    
    # Static files with caching
    location /static/ {
        alias /var/www/askaraai/static/;
        limit_req zone=static burst=50 nodelay;
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff always;
        add_header Access-Control-Allow-Origin "$scheme://$host" always;
        
        # Cache control for different file types
        location ~* \.(js|css)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }
        
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Accept-Ranges bytes;
        }
        
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Range";
        }
        
        # Default for other static files
        expires 7d;
        add_header Cache-Control "public";
    }
    
    # Video clips with security
    location /clips/ {
        alias /var/www/askaraai/static/clips/;
        limit_req zone=clips burst=5 nodelay;
        
        # Security headers for media files
        add_header X-Content-Type-Options nosniff always;
        add_header Content-Security-Policy "default-src 'none'; media-src 'self';" always;
        
        # Cache videos for 1 hour
        expires 1h;
        add_header Cache-Control "private, no-transform";
        
        # Only allow mp4 files
        location ~* \.mp4$ {
            try_files $uri =404;
            add_header Accept-Ranges bytes;
            add_header Content-Type "video/mp4";
        }
        
        # Block access to non-mp4 files
        location ~ {
            deny all;
            return 404;
        }
    }
    
    # Uploads directory
    location /uploads/ {
        alias /var/www/askaraai/static/uploads/;
        limit_req zone=api burst=2 nodelay;
        
        # Security headers
        add_header X-Content-Type-Options nosniff always;
        add_header Content-Disposition "attachment" always;
        
        # No caching for uploads
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        
        # Only allow specific file types
        location ~* \.(jpg|jpeg|png|gif|pdf|txt)$ {
            try_files $uri =404;
        }
        
        # Block everything else
        location ~ {
            deny all;
            return 404;
        }
    }
    
    # Essential files
    location = /favicon.ico {
        alias /var/www/askaraai/static/favicon.ico;
        expires 1y;
        add_header Cache-Control "public, immutable";
        log_not_found off;
        access_log off;
    }
    
    location = /robots.txt {
        try_files $uri @app;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    location = /sitemap.xml {
        try_files $uri @app;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        try_files $uri @app;
    }
    
    # Nginx status for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
    
    # Application proxy (fallback)
    location @app {
        proxy_pass http://unix:/var/www/askaraai/askaraai.sock;
        
        # Enhanced proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    error_page 429 /429.html;
    
    location = /404.html {
        root /var/www/askaraai/static/error;
        internal;
    }
    
    location = /50x.html {
        root /var/www/askaraai/static/error;
        internal;
    }
    
    location = /429.html {
        root /var/www/askaraai/static/error;
        internal;
    }
    
    # Enhanced logging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '$request_length';
    
    access_log /var/log/nginx/askaraai_access.log detailed;
    error_log /var/log/nginx/askaraai_error.log warn;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
}

# HTTPS server (only if SSL certificate exists)
server {
    listen 443 ssl http2;
    server_name askaraai.com www.askaraai.com;
    
    # SSL certificate paths (will be updated when Let's Encrypt is configured)
    ssl_certificate /etc/letsencrypt/live/askaraai.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/askaraai.com/privkey.pem;
    
    # Only enable this server if SSL certificates exist
    if (!-f /etc/letsencrypt/live/askaraai.com/fullchain.pem) {
        return 444;
    }
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/askaraai.com/chain.pem;
    resolver 8.8.8.8 8.8.4.4 1.1.1.1 valid=300s;
    resolver_timeout 5s;
    
    # Enhanced security headers for HTTPS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), location=(), payment=(), usb=()" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://accounts.google.com https://cdnjs.cloudflare.com https://cdn.tailwindcss.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com https://cdn.tailwindcss.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://generativelanguage.googleapis.com; frame-src 'self' https://accounts.google.com; object-src 'none'; base-uri 'self'; form-action 'self';" always;
    
    # Remove server signature
    server_tokens off;
    
    # Use the same configuration as HTTP server for all locations
    # (Copy all location blocks from the HTTP server above)
    include /etc/nginx/conf.d/askaraai-locations.conf;
}

# Redirect www to non-www (HTTPS only)
server {
    listen 443 ssl http2;
    server_name www.askaraai.com;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/askaraai.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/askaraai.com/privkey.pem;
    
    # Only enable if SSL exists
    if (!-f /etc/letsencrypt/live/askaraai.com/fullchain.pem) {
        return 444;
    }
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    return 301 https://askaraai.com$request_uri;
}

# Block all other domains/IPs
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    
    # Default SSL certificate (use snakeoil if Let's Encrypt not available)
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    
    # Log suspicious requests
    access_log /var/log/nginx/suspicious_access.log;
    
    # Drop connection without response
    return 444;
}
